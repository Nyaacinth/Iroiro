#!/usr/bin/env bash
set -e
cd "$(dirname "$0")"

function print_info() {
    if [ "$2" = 'error' ]; then
        echo -e "\033[1m[\033[31mERROR\033[0m\033[1m] >>> $1\033[0m"
    elif [ "$2" = 'note' ]; then
        echo -e "\033[1m[\033[34mNOTE\033[0m\033[1m] >>> $1\033[0m"
    else
        echo -e "\033[1m[\033[32mINFO\033[0m\033[1m] >>> $1\033[0m"
    fi
}
trap 'print_info "Something went wrong, please check your configuration. (::$?)" error' ERR

function enum_filename() {
    find "$1" | while read filename; do
        if [ -f "${filename}" ]; then
            echo "${filename}"
        fi
    done
}

# Set Options
build_source=source
build_target=export
if [ -f build.conf ]; then
    source build.conf
fi

# Check Teal Compiler
if hash tl 2>/dev/null; then
    print_info "Found Compiler - Teal version: $(tl --version)"
else
    print_info 'Teal Compiler is required but not found. Aborting...' error
    exit 2
fi

# Check Source Directory
if [ ! -d "${build_source}" ] || [ "$(ls -A ${build_source})" = "" ]; then
    print_info "Cannot access source directory. Aborting..." error
    exit 2
fi

# Cleaning Up
if [ -d "${build_target}" ]; then
    if [ ! "$(ls -A ${build_target})" = "" ]; then
        print_info 'Cleaning up...'
        rm -rf "${build_target}"
    fi
fi

# Build
mkdir -p "${build_target}"
print_info "Build Task: ${build_source} -> ${build_target}"
build_task_start_time=$(date "+%s")
enum_filename "${build_source}" | while read current_filename; do
    mkdir -p `echo \`dirname "${current_filename}"\` | sed "s/^${build_source}\//${build_target}\//"`
    target_filename="$(echo "${current_filename}" | sed "s/^${build_source}\//${build_target}\//")"
    if [ "${current_filename##*.}" = "tl" ]; then
        if [ -f "${current_filename%.*}.lua" ]; then
            print_info "Duplicated filenames between Teal and vanilla Lua: \"${current_filename}\" and \"${current_filename%.*}.lua\"" error
            exit 128
        fi
        tl check "${current_filename}" --quiet
        tl gen "${current_filename}" -o "${target_filename%.*}.lua"
    else
        cp "${current_filename}" "${target_filename}"
        echo "Copied: ${target_filename}"
    fi
done || if [ $? = 128 ]; then exit $?; else bash -c "exit $?"; fi
build_task_end_time=$(date "+%s")
print_info "Task Finished! (finished in $((build_task_end_time - build_task_start_time)) seconds)"

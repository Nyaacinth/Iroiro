{
    "scopeName": "source.yuescript",
    "name": "YueScript",
    "fileTypes": [
        "yue"
    ],
    "firstLineMatch": "^#!.*\\byue",
    "foldingStartMarker": "^\\s*class\\s+\\S.*$|.*(->|=>)\\s*$|.*[\\[{]\\s*$",
    "foldingStopMarker": "^\\s*$|^\\s*[}\\]]\\s*$",
    "patterns": [
        {
            "captures": {
                "1": {
                    "name": "variable.parameter.function.yue"
                },
                "2": {
                    "name": "storage.type.function.yue"
                }
            },
            "comment": "match stuff like: a -> â€¦ ",
            "match": "(\\([^()]*?\\))?\\s*([=-]>)",
            "name": "meta.inline.function.yue"
        },
        {
            "captures": {
                "1": {
                    "name": "entity.name.type.class"
                }
            },
            "match": "(\\b[A-Z]\\w*)\\s*",
            "name": "entity.name.type.class.yue"
        },
        {
            "begin": "'''",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.yue"
                }
            },
            "end": "'''",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.yue"
                }
            },
            "name": "string.quoted.heredoc.yue"
        },
        {
            "begin": "\"\"\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.yue"
                }
            },
            "end": "\"\"\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.yue"
                }
            },
            "name": "string.quoted.double.heredoc.yue",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.yue"
                },
                {
                    "include": "#interpolated_yue"
                }
            ]
        },
        {
            "begin": "\\[\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.yue"
                }
            },
            "end": "\\]\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.yue"
                }
            },
            "name": "string.quoted.other.multiline.yue"
        },
        {
            "begin": "(?<!-)--\\[\\[",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.yue"
                }
            },
            "end": "\\]\\]",
            "name": "comment.block.yue",
            "patterns": [
                {
                    "match": "@\\w*",
                    "name": "storage.type.annotation.yuescript"
                }
            ]
        },
        {
            "begin": "(?<!-)--",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.yue"
                }
            },
            "end": "(?:[ \\t]*\\n)",
            "name": "comment.line.yue",
            "patterns": [
                {
                    "match": "@\\w*",
                    "name": "storage.type.annotation.yuescript"
                }
            ]
        },
        {
            "match": "(?x)\\b(?<![\\.\\$])(\\b(if|then|else|elseif|export|until|global|const|macro|import|as|from|switch|and|or|not|when|with|using|do|for|in|while|return|unless|continue|break|local)\\b)(?!\\s*:)\\b",
            "name": "keyword.control.yue"
        },
        {
            "match": "(?x)~=|%|\\^|\\*|\\/|(\\-)?\\-(?!>)\\+|==|\\|>|=(?!>)|!=|<=|>=|\\.\\.=|<|>|\\.\\.(\\.)?|\\||\\|\\|\\*=|(?<!\\()/=|%=|\\+=|\\.\\.=|\\-=|\\b(?<![\\.\\$])(and|or|not)(?!\\s*:)\\b",
            "name": "keyword.operator.yue"
        },
        {
            "match": "\\b(?<![\\.\\$])(function|end|repeat)(?!\\s*:)\\b",
            "name": "invalid.illegal.yue"
        },
        {
            "begin": "(?<=\\s|^)(\\{)(?=.+?\\}\\s+[:=])",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.yue"
                }
            },
            "end": "(\\}\\s*[:=])",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.yue"
                }
            },
            "name": "meta.variable.assignment.destructured.object.yue",
            "patterns": [
                {
                    "include": "#variable_name"
                },
                {
                    "include": "#instance_variable"
                },
                {
                    "include": "#single_quoted_string"
                },
                {
                    "include": "#double_quoted_string"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "captures": {
                "1": {
                    "name": "entity.name.function.yue"
                },
                "2": {
                    "name": "entity.name.function.yue"
                },
                "3": {
                    "name": "variable.parameter.function.yue"
                },
                "4": {
                    "name": "storage.type.function.yue"
                }
            },
            "match": "(?x)\n\t\t\t\t(?<=^|\\s)\n\t\t\t\t(?=@?[a-zA-Z\\$_]\\??)\n\t\t\t\t(\n\t\t\t\t\t@?[a-zA-Z\\$_]\\??(\\w|\\$|:|\\.)*\\s*\n\t\t\t\t\t(?=[:=](\\s*\\(.*\\))?\\s*([=-]>))\n\t\t\t\t)\n\t\t\t",
            "name": "meta.function.yue"
        },
        {
            "match": "[=-]>",
            "name": "storage.type.function.yue"
        },
        {
            "match": "\\b(?<!\\.)(true|false|nil)(?!\\s*[:=])\\b",
            "name": "constant.language.boolean.yue"
        },
        {
            "captures": {
                "1": {
                    "name": "storage.type.class.yue"
                },
                "2": {
                    "name": "entity.name.type.class.yue"
                },
                "3": {
                    "name": "keyword.control.inheritance.yue"
                },
                "4": {
                    "name": "entity.other.inherited-class.yue"
                }
            },
            "match": "(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?",
            "name": "meta.class.yue"
        },
        {
            "match": "(?x)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b",
            "name": "support.function.yue"
        },
        {
            "match": "@?[A-Za-z_]\\w+(?=\\(|!|[ ]+(\"|'|\\{|-?(?!if|then|else|elseif|export|import|from|and|or|not|with|for|in|while|return|unless|continue|break|local)\\w+))",
            "name": "support.function.yue"
        },
        {
            "match": "\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b",
            "name": "support.function.yue"
        },
        {
            "match": ",[ |\\t]*",
            "name": "meta.delimiter.object.comma.yue"
        },
        {
            "match": "\\.",
            "name": "meta.delimiter.method.period.yue"
        },
        {
            "match": "\\{|\\}",
            "name": "meta.brace.curly.yue"
        },
        {
            "match": "\\(|\\)",
            "name": "meta.brace.round.yue"
        },
        {
            "match": "\\[|\\]\\s*",
            "name": "meta.brace.square.yue"
        },
        {
            "include": "#instance_variable"
        },
        {
            "include": "#single_quoted_string"
        },
        {
            "include": "#double_quoted_string"
        },
        {
            "include": "#numeric"
        }
    ],
    "repository": {
        "double_quoted_string": {
            "patterns": [
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.yue"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.yue"
                        }
                    },
                    "name": "string.quoted.double.yue",
                    "patterns": [
                        {
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.yue"
                        },
                        {
                            "include": "#interpolated_yue"
                        }
                    ]
                }
            ]
        },
        "instance_variable": {
            "patterns": [
                {
                    "match": "([@\\$])([a-zA-Z_\\$]\\w*)?",
                    "name": "variable.other.readwrite.instance.yue"
                }
            ]
        },
        "interpolated_yue": {
            "patterns": [
                {
                    "begin": "\\#\\{",
                    "captures": {
                        "0": {
                            "name": "punctuation.section.embedded.yue"
                        }
                    },
                    "end": "\\}",
                    "name": "source.yue.embedded.source",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        },
        "numeric": {
            "patterns": [
                {
                    "match": "(?<!\\$)\\b((0([box])[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?))\\b",
                    "name": "constant.numeric.yue"
                }
            ]
        },
        "single_quoted_string": {
            "patterns": [
                {
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.yue"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.yue"
                        }
                    },
                    "name": "string.quoted.single.yue",
                    "patterns": [
                        {
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.yue"
                        }
                    ]
                }
            ]
        },
        "variable_name": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "variable.assignment.yue"
                        }
                    },
                    "match": "([a-zA-Z\\$_]\\w*(\\.\\w+)*)",
                    "name": "variable.assignment.yue"
                }
            ]
        },
        "regex-character-class": {
            "patterns": [
                {
                    "match": "\\\\[wWsSdD]|\\.",
                    "name": "constant.character.character-class.regexp"
                },
                {
                    "match": "\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)",
                    "name": "constant.character.numeric.regexp"
                },
                {
                    "match": "\\\\c[A-Z]",
                    "name": "constant.character.control.regexp"
                },
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.backslash.regexp"
                }
            ]
        },
        "heregexp": {
            "patterns": [
                {
                    "match": "\\\\[bB]|\\^|\\$",
                    "name": "keyword.control.anchor.regexp"
                },
                {
                    "match": "\\\\[1-9]\\d*",
                    "name": "keyword.other.back-reference.regexp"
                },
                {
                    "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??",
                    "name": "keyword.operator.quantifier.regexp"
                },
                {
                    "begin": "(\\()((\\?=)|(\\?!))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        },
                        "3": {
                            "name": "meta.assertion.look-ahead.regexp"
                        },
                        "4": {
                            "name": "meta.assertion.negative-look-ahead.regexp"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "name": "meta.group.assertion.regexp",
                    "patterns": [
                        {
                            "include": "#heregexp"
                        }
                    ]
                },
                {
                    "begin": "\\((\\?:)?",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "name": "meta.group.regexp",
                    "patterns": [
                        {
                            "include": "#heregexp"
                        }
                    ]
                },
                {
                    "begin": "(\\[)(\\^)?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        },
                        "2": {
                            "name": "keyword.operator.negation.regexp"
                        }
                    },
                    "end": "(\\])",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        }
                    },
                    "name": "constant.other.character-class.set.regexp",
                    "patterns": [
                        {
                            "captures": {
                                "1": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "2": {
                                    "name": "constant.character.control.regexp"
                                },
                                "3": {
                                    "name": "constant.character.escape.backslash.regexp"
                                },
                                "4": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "5": {
                                    "name": "constant.character.control.regexp"
                                },
                                "6": {
                                    "name": "constant.character.escape.backslash.regexp"
                                }
                            },
                            "match": "(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))",
                            "name": "constant.other.character-class.range.regexp"
                        },
                        {
                            "include": "#regex-character-class"
                        }
                    ]
                },
                {
                    "include": "#regex-character-class"
                },
                {
                    "include": "#interpolated_yue"
                },
                {
                    "include": "#embedded_comment"
                }
            ]
        }
    }
}
